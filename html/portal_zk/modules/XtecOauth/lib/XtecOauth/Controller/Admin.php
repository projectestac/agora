<?php

class XtecOauth_Controller_Admin extends Zikula_AbstractController
{

    public function postInitialize()
    {
        $this->view->setCaching(false);
    }

    /**
     * The main administration function. This function is the default function, and is called whenever the
     * module is initiated without defining arguments.  As such it can  be used for a number of things, but
     * most commonly it either just shows the module menu and returns or calls whatever the module designer
     * feels should be the default function (often this is the view() function)
     *
     * @return string HTML ouptput
     */
    public function main()
    {
        // security check
        if (!SecurityUtil::checkPermission('XtecOauth::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // return the output that has been generated by this function
        return $this->view->fetch('xtecoauth_admin_main.tpl');
    }

    /**
     * This is a standard function to show the form to change the configuration parameters of the module
     *
     * @return string HTML ouptput
     * @throws Zikula_Exception_Forbidden
     */
    public function modifyconfig()
    {
        // security check
        if (!SecurityUtil::checkPermission('XtecOauth::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }

        // assign module vars
        return $this->view
            ->assign('XtecOauth', modUtil::getVar($this->name))
            ->fetch('xtecoauth_admin_modifyconfig.tpl');
    }

    /**
     * This is a standard function that is called with the values of the form supplied by xtecoauth_admin_modifyconfig.tpl
     *
     * @return bool true if item created, false otherwise
     * @throws Zikula_Exception_Forbidden
     */
    public function updateconfig($args)
    {
        $xtecoauth_clientid = FormUtil::getPassedValue('xtecoauth_clientid', $args['xtecoauth_clientid'] ?? '', 'POST');
        $xtecoauth_clientsecret = FormUtil::getPassedValue('xtecoauth_clientsecret', $args['xtecoauth_clientsecret'] ?? '', 'POST');
        $xtecoauth_apiurlbase = FormUtil::getPassedValue('xtecoauth_apiurlbase', $args['xtecoauth_apiurlbase'] ?? '', 'POST');
        $xtecoauth_authorizedomain = FormUtil::getPassedValue('xtecoauth_authorizedomain', $args['xtecoauth_authorizedomain'] ?? '', 'POST');

        if (!SecurityUtil::checkPermission('XtecOauth::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }

        // Confirm authorisation code
        $this->checkCsrfToken();

        // Update module variables.
        $this
            ->setVar('xtecoauth_clientid', $xtecoauth_clientid)
            ->setVar('xtecoauth_clientsecret', $xtecoauth_clientsecret)
            ->setVar('xtecoauth_apiurlbase', $xtecoauth_apiurlbase)
            ->setVar('xtecoauth_authorizedomain', $xtecoauth_authorizedomain);

        LogUtil::registerStatus($this->__('Done! Module configuration updated.'));

        return System::redirect(ModUtil::url('XtecOauth', 'admin', 'main'));
    }

}