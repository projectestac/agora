<?php

/**
 * The main administration function
 *
 * @author Francesc Bassas i Bullich
 * @return string output
 */
class XtecMailer_Controller_Admin extends Zikula_AbstractController {

    public function main() {
        // security check
        if (!SecurityUtil::checkPermission('XtecMailer::', '::', ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        // create a new output object
        $render = Zikula_View::getInstance('XtecMailer', false);

        return $render->fetch('xtecmailer_admin_main.tpl');
    }

    /**
     * This is a standard function to modify the configuration parameters of the module
     * @author Francesc Bassas i Bullich
     * @return string HTML string
     */
    public function modifyconfig() {
        // security check
        if (!SecurityUtil::checkPermission('XtecMailer::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // create a new output object
        $render = Zikula_View::getInstance('XtecMailer', false);

        // assign the module contenttypes
        $render->assign('contenttypes', ModUtil::func('XtecMailer', 'admin', 'getContentTypes'));

        // assign all module vars
        $render->assign(ModUtil::getVar('XtecMailer'));

        // @aginard: force replyAddress to be site admin mail
        $render->assign('replyAddress', System::getVar('adminmail'));

        // @aginard: configuration params will be only shown to xtecadmin in multisite environments
        global $ZConfig;

        $is_xtecadmin = (UserUtil::getVar('uname') == 'xtecadmin') ? true : false;
        $showextraparams = (!(bool)$ZConfig['Multisites']['multi'] || $is_xtecadmin) ? true : false;

        $render->assign('showextraparams', $showextraparams);

        return $render->fetch('xtecmailer_admin_modifyconfig.tpl');
    }

    /**
     * This is a standard function to update the configuration parameters of the
     * module given the information passed back by the modification form
     * @author Francesc Bassas i Bullich
     * @return bool true if update successful
     */
    public function updateconfig() {
        // security check
        if (!SecurityUtil::checkPermission('XtecMailer::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // Confirm authorisation code
        $this->checkCsrfToken();

        // set our new module variable values
        $enabled = FormUtil::getPassedValue('enabled', '', 'POST');
        ModUtil::setVar('XtecMailer', 'enabled', $enabled);
        $idApp = FormUtil::getPassedValue('idApp', '', 'POST');
        ModUtil::setVar('XtecMailer', 'idApp', $idApp);
        $replyAddress = FormUtil::getPassedValue('replyAddress', '', 'POST');
        ModUtil::setVar('XtecMailer', 'replyAddress', $replyAddress);
        $sender = FormUtil::getPassedValue('sender', '', 'POST');
        ModUtil::setVar('XtecMailer', 'sender', $sender);
        $environment = FormUtil::getPassedValue('environment', '', 'POST');
        ModUtil::setVar('XtecMailer', 'environment', $environment);
        $contenttype = FormUtil::getPassedValue('contenttype', '', 'POST');
        ModUtil::setVar('XtecMailer', 'contenttype', $contenttype);
        $log = FormUtil::getPassedValue('log', '', 'POST');
        ModUtil::setVar('XtecMailer', 'log', $log);
        $debug = FormUtil::getPassedValue('debug', '', 'POST');
        ModUtil::setVar('XtecMailer', 'debug', $debug);
        $logpath = FormUtil::getPassedValue('logpath', '', 'POST');
        ModUtil::setVar('XtecMailer', 'logpath', $logpath);

        // the module configuration has been updated successfuly
        LogUtil::registerStatus(__('Done! Module configuration updated.', $dom));

        // This function generated no output, and so now it is complete we redirect
        // the user to an appropriate page for them to carry on their work
        return System::redirect(ModUtil::url('XtecMailer', 'admin', 'main'));
    }

    /**
     * This function displays a form to send a test mail
     * @author Francesc Bassas i Bullich
     * @return string HTML string
     */
    public function testconfig() {
        // security check
        if (!SecurityUtil::checkPermission('XtecMailer::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // create a new output object
        $view = Zikula_View::getInstance('XtecMailer', false);

        // Return the output that has been generated by this function
        return $view->fetch('xtecmailer_admin_testconfig.tpl');
    }

    /**
     * This function processes the results of the test form
     * @author Francesc Bassas i Bullich
     * @param  string args['toname'] name to the recipient
     * @param  string args['toaddress'] the address of the recipient
     * @param  string args['subject'] message subject
     * @param  string args['body'] message body
     * @param  int args['html'] HTML flag
     * @return bool true if successful, false otherwise
     */
    public function sendmessage($args) {
        // security check
        if (!SecurityUtil::checkPermission('XtecMailer::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        $toaddress = (string) FormUtil::getPassedValue('toaddress', isset($args['toaddress']) ? $args['toaddress'] : null, 'POST');
        $subject = (string) FormUtil::getPassedValue('subject', isset($args['subject']) ? $args['subject'] : null, 'POST');
        $body = (string) FormUtil::getPassedValue('body', isset($args['body']) ? $args['body'] : null, 'POST');
        $html = (bool) FormUtil::getPassedValue('html', isset($args['html']) ? $args['html'] : false, 'POST');

        // Confirm authorisation code
        $this->checkCsrfToken();

        $result = ModUtil::apiFunc('Mailer', 'user', 'sendmessage', array('toaddress' => $toaddress,
                    'subject' => $subject,
                    'body' => $body,
                    'html' => $html));

        // check our result and return the correct error code
        if ($result === true) {
            // Success
            LogUtil::registerStatus(__('Done! Message sent.'));
        } elseif ($result === false) {
            // Failure
            LogUtil::registerError(__f('Error! Could not send message. %s', ''));
        } else {
            // Failure with error
            LogUtil::registerError(__f('Error! Could not send message. %s', $result));
        }

        // This function generated no output, and so now it is complete we redirect
        // the user to an appropriate page for them to carry on their work
        return System::redirect(ModUtil::url('XtecMailer', 'admin', 'main'));
    }

    /**
     * Gets the possible values for content type
     * @author Francesc Bassas i Bullich
     * @return Array possible values of content types 
     */
    public function getContentTypes() {
        return array(1 => 'text/plain', 2 => 'text/html');
    }

}